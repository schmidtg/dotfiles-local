" Colors
:silent! colorscheme solarized

" Map escape to ,e (,e)
imap ,e <esc>

" Opens a vertical split and switches over (\v)
nnoremap <leader>v <C-w>v<C-w>l

" Quickly save
nmap <leader>w :w!<cr>

"""""""""""""""""""
" Quickfix window
"""""""""""""""""""
" Remap location list toggle for ListToggle plugin conflict ( ll)
let g:lt_location_list_toggle_map = '<leader>ll'


"""""""""""""""""""
" Searching
"""""""""""""""""""
" Search for the word under the cursor (Shift-K)
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Search all files in current dir (Ctrl-Shift-K)
"command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
"nnoremap <C-S-K> :Ag<SPACE>


"""""""""""""""""""
" Ctrlp
"""""""""""""""""""
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'

" Do not use the nearest .git directory as the cwd
let g:ctrlp_working_path_mode = 0

" Interpret space as either <space> or _ when matching files
let g:ctrlp_abbrev = {
    \ 'gmode': 't',
    \ 'abbrevs': [
        \ {
        \ 'pattern': '\(^@.\+\|\\\@<!:.\+\)\@<! ',
        \ 'expanded': '_',
        \ 'mode': 'pfrz',
        \ },
        \ ]
    \ }

" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>

" Use alternate matcher
" http://blog.mikecordell.com/2015/01/27/better-fuzzy-search-with-ctrl-p-in-vim.html
if executable('matcher')
    let g:ctrlp_match_func = { 'match': 'GoodMatch' }

    function! GoodMatch(items, str, limit, mmode, ispath, crfile, regex)

      " Create a cache file if not yet exists
      let cachefile = ctrlp#utils#cachedir().'/matcher.cache'
      if !( filereadable(cachefile) && a:items == readfile(cachefile) )
        call writefile(a:items, cachefile)
      endif
      if !filereadable(cachefile)
        return []
      endif

      " a:mmode is currently ignored. In the future, we should probably do
      " something about that. the matcher behaves like "full-line".
      let cmd = 'matcher --limit '.a:limit.' --manifest '.cachefile.' '
      if !( exists('g:ctrlp_dotfiles') && g:ctrlp_dotfiles )
        let cmd = cmd.'--no-dotfiles '
      endif
      let cmd = cmd.a:str

      return split(system(cmd), "\n")

    endfunction
end


"""""""""""""""""""
" Buffer Management
"""""""""""""""""""
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

"""""""""""""""""""
" Buffergator plugin
"""""""""""""""""""
" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

" I want my own keymappings...
let g:buffergator_suppress_keymaps = 1

" Looper buffers
"let g:buffergator_mru_cycle_loop = 1

" Go to the previous buffer open
nmap <leader>jj :BuffergatorMruCyclePrev<cr>

" Go to the next buffer open
nmap <leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
nmap <leader>bl :BuffergatorOpen<cr>

" Shared bindings from Solution #1 from earlier
nmap <leader>T :enew<cr>
nmap <leader>bq :bp <BAR> bd #<cr>


"""""""""""""""""""
" vim-rooter plugin
"""""""""""""""""""
" Reset working directory to closest ctrlp file (touch file in each project dir)
let g:rooter_patterns = ['.ctrlp']
map <silent> <unique> <Leader>wo <Plug>RooterChangeToRootDirectory


"""""""""""""""""""
" RSpec / Tmux
"""""""""""""""""""
" Send the spec output to a tmux pane
" let g:rspec_command = 'call Send_to_Tmux("rspec {spec}\n")'
let g:rspec_command = "Dispatch rspec {spec}"


"""""""""""""""""""
" Formatting
"""""""""""""""""""
" Automatically remove all trailing whitespace after saving
autocmd BufWritePre * :%s/\s\+$//e


"""""""""""""""""""
" Snippets
"""""""""""""""""""
let g:user_emmet_leader_key='<c-j>'

"""""""""""""""""""
" Load plugins on insert mode
"""""""""""""""""""
augroup load_us_ycm
  autocmd!
  autocmd InsertEnter * call plug#load('ultisnips', 'YouCompleteMe')
                     \| call youcompleteme#Enable() | autocmd! load_us_ycm
augroup END

let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"""""""""""""""""""
" Easy switch to project directories
"""""""""""""""""""
let g:sermo='/home/vagrant/src/sermo'
let g:aramak='/home/vagrant/src/sermo/apps/aramak'
let g:dummy='/home/vagrant/src/sermo/apps/dummy'
let g:email='/home/vagrant/src/sermo/apps/email'
let g:posts='/home/vagrant/src/sermo/apps/posts'
let g:suds='/home/vagrant/src/sermo/apps/suds'
let g:surveza='/home/vagrant/src/sermo/apps/surveza'
let g:telemetry='/home/vagrant/src/sermo/apps/telemetry'
let g:client_portal='/home/vagrant/src/client_portal/'
let g:drug_ratings='/home/vagrant/src/drug_ratings/'
let g:puppet='/home/vagrant/src/puppet/'
let g:verification='/home/vagrant/src/verification/'

nmap <leader>cd :cd `=<SPACE>
